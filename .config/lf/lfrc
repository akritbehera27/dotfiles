# interpreter for shell commands
set shell sh
# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

set hidden true
set ignorecase true
set icons true

# use enter for shell commands
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        image/*) nsxiv $fx;;
        video/*) vlc $fx;;
        audio/*) vlc $fx;;
        application/pdf) zathura $fx;;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}


# Define a custom command to open a file in a specific application

cmd open_file_with ${{
  clear
  printf "Avaliable Options / Apps:\n"

  printf "Vs Code \n"
  printf "Brave Browser \n"
  printf "Libre Office \n"
  printf "Vlc Player ( audio / video )\n"
  printf "Img viewer ( Image )\n"
  printf "Gimp viewer ( Image )\n"

  printf "\nApp Name to Open: "
  read app
  app=${app,,}
  fname=$(basename "$f")
  if [[ $app == *"code"* || $app == *"vs"* ]]; then
    notify-send "Opening $fname " -r 967
    code $f
  elif [[ $app == *"office"* || $app == *"libre"* ]]; then
    notify-send "Opening $fname " -r 967
    libreoffice $f
  elif [[ $app == *"br"* ]]; then
    notify-send "Opening $fname " -r 967
    brave $f
  elif [[ $app == *"vlc"* || $app == *"vid"* || $app == *"au"* ]]; then
    notify-send "Opening $fname " -r 967
    vlc $f
  elif [[ $app == *"gimp"* || $app == *"gi"* ]]; then
    notify-send "Opening $fname " -r 967
    gimp $f
  elif [[ $app == *"im"* ]]; then
    notify-send "Opening $fname " -r 967
    nsxiv $PWD
  else
    exit 12
  fi
  clear
}}

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# Trash bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd restore_trash ${{
  trash-restore
}}

cmd imgo ${{
  nsxiv $PWD
}}

map . set hidden!
map DD trash
map DR restore_trash
map mf mkfile
map md mkdir
map O open_file_with
map I imgo

